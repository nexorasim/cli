stages:
  - test
  - deploy-staging
  - deploy-production

variables:
  NODE_VERSION: "18"
  STAGING_URL: "https://staging.esim-myanmar.com"
  PRODUCTION_URL: "https://esim-myanmar.com"

# Test stage
test:
  stage: test
  image: node:18-alpine
  before_script:
    - apk add --no-cache libxml2-utils curl jq bc
    - npm ci
  script:
    - npm test
    - xmllint --noout sitemap.xml
    - xmllint --noout rss.xml
    - xmllint --noout atom.xml
    - npm install -g @apidevtools/swagger-parser
    - swagger-parser validate openapi.yaml
  artifacts:
    reports:
      junit: test-results.xml
    expire_in: 1 week

# Staging deployment
deploy-staging:
  stage: deploy-staging
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq bc libxml2-utils
  script:
    - echo "Deploying to staging..."
    # Add your staging deployment commands here
    - chmod +x update-check.sh
    - ./update-check.sh staging
  environment:
    name: staging
    url: $STAGING_URL
  only:
    - main
  when: manual

# Production deployment
deploy-production:
  stage: deploy-production
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq bc libxml2-utils
  script:
    - echo "Deploying to production..."
    # Add your production deployment commands here
    - chmod +x update-check.sh
    - ./update-check.sh production
    # Ping search engines
    - curl -s "https://www.google.com/ping?sitemap=$PRODUCTION_URL/sitemap.xml"
    - curl -s "https://www.bing.com/ping?sitemap=$PRODUCTION_URL/sitemap.xml"
  environment:
    name: production
    url: $PRODUCTION_URL
  only:
    - main
  when: manual
  dependencies:
    - deploy-staging